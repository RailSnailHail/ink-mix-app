{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/app/api/inventory/deduct/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\ninterface DeductRequest {\n  components: {\n    inkId: number;\n    grams: number;\n  }[];\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body: DeductRequest = await request.json();\n    const { components } = body;\n\n    if (!components || components.length === 0) {\n      return NextResponse.json({ error: 'No components to deduct' }, { status: 400 });\n    }\n\n    const result = await prisma.$transaction(async (tx) => {\n      // Step 1: Check all stock levels first.\n      for (const component of components) {\n        const ink = await tx.ink.findUnique({\n          where: { id: component.inkId },\n        });\n        if (!ink || ink.stockG < component.grams) {\n          // If any ink has insufficient stock, throw an error to cancel the transaction.\n          throw new Error(`Insufficient stock for ${ink?.name || 'an ink'}. Required: ${component.grams.toFixed(1)}g, Available: ${ink?.stockG.toFixed(1) || 0}g`);\n        }\n      }\n\n      // Step 2: If all checks pass, proceed with deductions.\n      for (const component of components) {\n        await tx.ink.update({\n          where: { id: component.inkId },\n          data: { stockG: { decrement: component.grams } },\n        });\n      }\n\n      return { success: true };\n    });\n\n    return NextResponse.json(result, { status: 200 });\n\n  } catch (error) {\n    // This will catch the \"Insufficient stock\" error from above.\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    console.error(\"API Error deducting inventory:\", errorMessage);\n    return NextResponse.json({ error: errorMessage }, { status: 400 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AASxB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAsB,MAAM,QAAQ,IAAI;QAC9C,MAAM,EAAE,UAAU,EAAE,GAAG;QAEvB,IAAI,CAAC,cAAc,WAAW,MAAM,KAAK,GAAG;YAC1C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,MAAM,OAAO,YAAY,CAAC,OAAO;YAC9C,wCAAwC;YACxC,KAAK,MAAM,aAAa,WAAY;gBAClC,MAAM,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,CAAC;oBAClC,OAAO;wBAAE,IAAI,UAAU,KAAK;oBAAC;gBAC/B;gBACA,IAAI,CAAC,OAAO,IAAI,MAAM,GAAG,UAAU,KAAK,EAAE;oBACxC,+EAA+E;oBAC/E,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,KAAK,QAAQ,SAAS,YAAY,EAAE,UAAU,KAAK,CAAC,OAAO,CAAC,GAAG,cAAc,EAAE,KAAK,OAAO,QAAQ,MAAM,EAAE,CAAC,CAAC;gBACzJ;YACF;YAEA,uDAAuD;YACvD,KAAK,MAAM,aAAa,WAAY;gBAClC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;oBAClB,OAAO;wBAAE,IAAI,UAAU,KAAK;oBAAC;oBAC7B,MAAM;wBAAE,QAAQ;4BAAE,WAAW,UAAU,KAAK;wBAAC;oBAAE;gBACjD;YACF;YAEA,OAAO;gBAAE,SAAS;YAAK;QACzB;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IAEjD,EAAE,OAAO,OAAO;QACd,6DAA6D;QAC7D,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF","debugId":null}}]
}