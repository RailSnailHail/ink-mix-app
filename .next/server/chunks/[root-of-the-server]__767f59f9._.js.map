{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAMA,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhD,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB;uCAEe","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/app/api/inks/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nexport async function POST(request: Request) {\n  try {\n    // Now correctly expects stockG to be a number\n    const { name, shade, colorHex, stockG } = await request.json();\n\n    if (typeof stockG !== 'number') {\n       return NextResponse.json({ error: 'Stock must be a number' }, { status: 400 });\n    }\n\n    const newInk = await prisma.ink.create({\n      data: { name, shade, colorHex, stockG },\n    });\n\n    return NextResponse.json(newInk, { status: 201 });\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {\n      return NextResponse.json({ error: 'An ink with this name already exists.' }, { status: 409 });\n    }\n    console.error(\"API Error creating ink:\", error);\n    return NextResponse.json({ error: 'Failed to create ink on the server.' }, { status: 500 });\n  }\n}\n\nexport async function GET(request: Request) {\n  try {\n    const inks = await prisma.ink.findMany({ where: { isDeleted: false }, orderBy: { shade: 'asc' } });\n    return NextResponse.json(inks);\n  } catch (error) {\n    console.error(\"API Error fetching inks:\", error);\n    return NextResponse.json({ error: 'Failed to fetch inks' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,8CAA8C;QAC9C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE5D,IAAI,OAAO,WAAW,UAAU;YAC7B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,GAAG,CAAC,MAAM,CAAC;YACrC,MAAM;gBAAE;gBAAM;gBAAO;gBAAU;YAAO;QACxC;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,6HAAA,CAAA,SAAM,CAAC,6BAA6B,IAAI,MAAM,IAAI,KAAK,SAAS;YACnF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QACA,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;YAAE,OAAO;gBAAE,WAAW;YAAM;YAAG,SAAS;gBAAE,OAAO;YAAM;QAAE;QAChG,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}