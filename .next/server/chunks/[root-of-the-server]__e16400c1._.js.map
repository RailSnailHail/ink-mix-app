{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/app/api/inks/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient, Prisma } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function PUT(request: Request, { params }: { params: { id: string } }) {\n  try {\n    const id = parseInt(params.id);\n    const body = await request.json();\n    const stockGNumber = parseFloat(body.stockG);\n\n    if (isNaN(id) || isNaN(stockGNumber)) {\n      return NextResponse.json({ error: 'Invalid data provided' }, { status: 400 });\n    }\n\n    const updatedInk = await prisma.ink.update({\n      where: { id },\n      data: {\n        name: body.name,\n        shade: body.shade,\n        colorHex: body.colorHex,\n        stockG: stockGNumber,\n      },\n    });\n    return NextResponse.json(updatedInk);\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {\n      return NextResponse.json({ error: 'An ink with this name already exists.' }, { status: 409 });\n    }\n    return NextResponse.json({ error: 'Failed to update ink' }, { status: 500 });\n  }\n}\n\n// NEW function to handle restoring an ink\nexport async function PATCH(request: Request, { params }: { params: { id: string } }) {\n  try {\n    const id = parseInt(params.id);\n    const restoredInk = await prisma.ink.update({\n      where: { id },\n      data: { isDeleted: false }, // Set the isDeleted flag back to false\n    });\n    return NextResponse.json(restoredInk);\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to restore ink' }, { status: 500 });\n  }\n}\n\n// Enhanced function to handle both soft and permanent deletes\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const id = parseInt(params.id);\n    const isPermanent = request.nextUrl.searchParams.get('permanent') === 'true';\n\n    if (isPermanent) {\n      // Hard delete from the database. This cannot be undone.\n      await prisma.ink.delete({ where: { id } });\n    } else {\n      // Soft delete, which can be restored.\n      await prisma.ink.update({\n        where: { id },\n        data: { isDeleted: true },\n      });\n    }\n    return new NextResponse(null, { status: 204 });\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2003') {\n      return NextResponse.json({ error: 'This ink cannot be deleted because it is used in a saved recipe.' }, { status: 409 });\n    }\n    return NextResponse.json({ error: 'Failed to delete ink' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAC7B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,eAAe,WAAW,KAAK,MAAM;QAE3C,IAAI,MAAM,OAAO,MAAM,eAAe;YACpC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,aAAa,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;YACzC,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,QAAQ;gBACvB,QAAQ;YACV;QACF;QACA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,6HAAA,CAAA,SAAM,CAAC,6BAA6B,IAAI,MAAM,IAAI,KAAK,SAAS;YACnF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QACA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,MAAM,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAClF,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAC7B,MAAM,cAAc,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;YAC1C,OAAO;gBAAE;YAAG;YACZ,MAAM;gBAAE,WAAW;YAAM;QAC3B;QACA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,OAAO,OAAoB,EAAE,EAAE,MAAM,EAA8B;IACvF,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAC7B,MAAM,cAAc,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,iBAAiB;QAEtE,IAAI,aAAa;YACf,wDAAwD;YACxD,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE;gBAAG;YAAE;QAC1C,OAAO;YACL,sCAAsC;YACtC,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;gBACtB,OAAO;oBAAE;gBAAG;gBACZ,MAAM;oBAAE,WAAW;gBAAK;YAC1B;QACF;QACA,OAAO,IAAI,+PAAA,CAAA,eAAY,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC9C,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,6HAAA,CAAA,SAAM,CAAC,6BAA6B,IAAI,MAAM,IAAI,KAAK,SAAS;YACnF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmE,GAAG;gBAAE,QAAQ;YAAI;QACxH;QACA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}