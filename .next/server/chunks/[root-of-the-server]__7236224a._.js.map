{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAMA,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhD,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB;uCAEe","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/app/api/inks/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { Prisma } from '@prisma/client';\n\nexport async function PUT(request: Request, { params }: { params: { id: string } }) {\n  try {\n    const id = parseInt(params.id, 10);\n    const body = await request.json();\n\n    // This handles \"restore\" requests\n    if (body.isDeleted === false) {\n      const restoredInk = await prisma.ink.update({ where: { id }, data: { isDeleted: false } });\n      return NextResponse.json(restoredInk);\n    }\n\n    // This handles a full update, now expecting stockG as a number\n    if (typeof body.stockG !== 'number') {\n       return NextResponse.json({ error: 'Stock must be a number' }, { status: 400 });\n    }\n\n    const updatedInk = await prisma.ink.update({\n      where: { id },\n      data: {\n        name: body.name,\n        shade: body.shade,\n        colorHex: body.colorHex,\n        stockG: body.stockG,\n      },\n    });\n    return NextResponse.json(updatedInk);\n  } catch (error) {\n    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {\n      return NextResponse.json({ error: 'An ink with this name already exists.' }, { status: 409 });\n    }\n    console.error(\"API Error updating ink:\", error);\n    return NextResponse.json({ error: 'Failed to update ink' }, { status: 500 });\n  }\n}\n\n// The DELETE function is unchanged and correct.\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) { /* ... */ }"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE,EAAE;QAC/B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,kCAAkC;QAClC,IAAI,KAAK,SAAS,KAAK,OAAO;YAC5B,MAAM,cAAc,MAAM,sHAAA,CAAA,UAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE;gBAAG;gBAAG,MAAM;oBAAE,WAAW;gBAAM;YAAE;YACxF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;QAEA,+DAA+D;QAC/D,IAAI,OAAO,KAAK,MAAM,KAAK,UAAU;YAClC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAM,CAAC,GAAG,CAAC,MAAM,CAAC;YACzC,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,QAAQ;gBACvB,QAAQ,KAAK,MAAM;YACrB;QACF;QACA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,6HAAA,CAAA,SAAM,CAAC,6BAA6B,IAAI,MAAM,IAAI,KAAK,SAAS;YACnF,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QACA,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,OAAO,OAAoB,EAAE,EAAE,MAAM,EAA8B,GAAc","debugId":null}}]
}