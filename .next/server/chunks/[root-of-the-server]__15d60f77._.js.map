{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAMA,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhD,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB;uCAEe","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/jim/ink-mix-app/src/app/api/mixes/finish/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    // The frontend will send the mix name, its components, and the final color swatch\n    const { mixName, components, swatchHex } = body;\n\n    if (!mixName || !components || components.length === 0 || !swatchHex) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const totalGrams = components.reduce((sum, c) => sum + c.grams, 0);\n    if (totalGrams <= 0) {\n      return NextResponse.json({ error: 'Mix has no weight' }, { status: 400 });\n    }\n\n    // Use a transaction to ensure all database operations succeed or fail together\n    const result = await prisma.$transaction(async (tx) => {\n      // 1. Create a permanent, reusable Recipe\n      const newRecipe = await tx.recipe.create({\n        data: {\n          name: mixName,\n          swatchHex: swatchHex,\n          components: {\n            create: components.map(c => ({\n              inkId: c.inkId,\n              // Store the ratio for future re-mixing\n              ratio: c.grams / totalGrams,\n            })),\n          },\n        },\n      });\n\n      // 2. Deduct the used amounts from the main Ink inventory\n      for (const component of components) {\n        await tx.ink.update({\n          where: { id: component.inkId },\n          data: { stockG: { decrement: component.grams } },\n        });\n      }\n\n      return newRecipe;\n    });\n\n    return NextResponse.json(result, { status: 201 });\n\n  } catch (error) {\n    console.error(\"API Error finishing mix:\", error);\n    return NextResponse.json({ error: 'Failed to save and process mix' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,kFAAkF;QAClF,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG;QAE3C,IAAI,CAAC,WAAW,CAAC,cAAc,WAAW,MAAM,KAAK,KAAK,CAAC,WAAW;YACpE,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,aAAa,WAAW,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,KAAK,EAAE;QAChE,IAAI,cAAc,GAAG;YACnB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,+EAA+E;QAC/E,MAAM,SAAS,MAAM,sHAAA,CAAA,UAAM,CAAC,YAAY,CAAC,OAAO;YAC9C,yCAAyC;YACzC,MAAM,YAAY,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvC,MAAM;oBACJ,MAAM;oBACN,WAAW;oBACX,YAAY;wBACV,QAAQ,WAAW,GAAG,CAAC,CAAA,IAAK,CAAC;gCAC3B,OAAO,EAAE,KAAK;gCACd,uCAAuC;gCACvC,OAAO,EAAE,KAAK,GAAG;4BACnB,CAAC;oBACH;gBACF;YACF;YAEA,yDAAyD;YACzD,KAAK,MAAM,aAAa,WAAY;gBAClC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;oBAClB,OAAO;wBAAE,IAAI,UAAU,KAAK;oBAAC;oBAC7B,MAAM;wBAAE,QAAQ;4BAAE,WAAW,UAAU,KAAK;wBAAC;oBAAE;gBACjD;YACF;YAEA,OAAO;QACT;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IAEjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}